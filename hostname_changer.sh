#!/usr/bin/env python3
import os
import sys
import platform
import argparse
import shutil
import subprocess
from datetime import datetime

# Constants
CONFIG_FILE = os.path.expanduser("~/.dns_changer.conf")
BACKUP_DIR = os.path.expanduser("~/.dns_changer_backups")
DEFAULT_DNS_SERVERS = ["1.1.1.1", "8.8.8.8"]  # Cloudflare and Google DNS

# Colors for terminal output
class Colors:
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RESET = "\033[0m"

def print_error(message):
    print(f"{Colors.RED}[ERROR] {message}{Colors.RESET}")

def print_warning(message):
    print(f"{Colors.YELLOW}[WARN] {message}{Colors.RESET}")

def print_success(message):
    print(f"{Colors.GREEN}[INFO] {message}{Colors.RESET}")

def is_valid_dns(dns):
    """Validate DNS server format (simple check)."""
    parts = dns.split(".")
    return len(parts) == 4 and all(part.isdigit() and 0 <= int(part) <= 255 for part in parts)

def backup_resolv_conf():
    """Backup the current DNS configuration."""
    if not os.path.exists(BACKUP_DIR):
        os.makedirs(BACKUP_DIR)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = os.path.join(BACKUP_DIR, f"resolv.conf.bak_{timestamp}")
    if platform.system() == "Linux":
        shutil.copy("/etc/resolv.conf", backup_file)
    elif platform.system() == "Windows":
        subprocess.run(["netsh", "interface", "ip", "show", "dns"], stdout=open(backup_file, "w"))
    return backup_file

def restore_resolv_conf(backup_file):
    """Restore DNS configuration from a backup."""
    if not os.path.exists(backup_file):
        print_error("Backup file not found.")
        return False
    if platform.system() == "Linux":
        shutil.copy(backup_file, "/etc/resolv.conf")
    elif platform.system() == "Windows":
        with open(backup_file, "r") as f:
            dns_servers = [line.split()[-1] for line in f if "DNS" in line]
            for server in dns_servers:
                subprocess.run(["netsh", "interface", "ip", "set", "dns", "name=Wi-Fi", f"source=static", f"addr={server}"])
    return True

def set_dns_servers(dns_servers):
    """Set custom DNS servers."""
    if platform.system() == "Linux":
        with open("/etc/resolv.conf", "w") as f:
            f.write("# Generated by dns_changer.py\n")
            for server in dns_servers:
                f.write(f"nameserver {server}\n")
    elif platform.system() == "Windows":
        for server in dns_servers:
            subprocess.run(["netsh", "interface", "ip", "set", "dns", "name=Wi-Fi", f"source=static", f"addr={server}"])

def get_current_dns():
    """Retrieve current DNS servers."""
    if platform.system() == "Linux":
        with open("/etc/resolv.conf", "r") as f:
            return [line.split()[-1] for line in f if line.startswith("nameserver")]
    elif platform.system() == "Windows":
        result = subprocess.run(["netsh", "interface", "ip", "show", "dns"], capture_output=True, text=True)
        return [line.split()[-1] for line in result.stdout.splitlines() if "DNS" in line]

def main():
    parser = argparse.ArgumentParser(description="DNS Changer Tool")
    parser.add_argument("--set", nargs="+", help="Set custom DNS servers (e.g., --set 1.1.1.1 8.8.8.8)")
    parser.add_argument("--restore", help="Restore DNS from a backup file")
    parser.add_argument("--status", action="store_true", help="Show current DNS settings")
    parser.add_argument("--backup", action="store_true", help="Backup current DNS settings")
    args = parser.parse_args()

    if args.set:
        if not all(is_valid_dns(server) for server in args.set):
            print_error("Invalid DNS server format. Use IPv4 addresses (e.g., 1.1.1.1).")
            sys.exit(1)
        backup_resolv_conf()
        set_dns_servers(args.set)
        print_success(f"DNS servers set to: {', '.join(args.set)}")

    elif args.restore:
        if restore_resolv_conf(args.restore):
            print_success("DNS settings restored from backup.")

    elif args.status:
        current_dns = get_current_dns()
        print_success(f"Current DNS servers: {', '.join(current_dns)}")

    elif args.backup:
        backup_file = backup_resolv_conf()
        print_success(f"DNS settings backed up to: {backup_file}")

    else:
        parser.print_help()

if __name__ == "__main__":
    main()